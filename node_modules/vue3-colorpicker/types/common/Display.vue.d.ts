import { Color } from "../utils/color";
declare const _default: import("vue").DefineComponent<{
    color: import("vue-types").VueTypeDef<Color>;
    disableAlpha: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
}, {
    state: {
        color: {
            toString: (format?: import("../utils/color").ColorFormat | undefined) => string;
            toHexString: () => string;
            toRgbString: () => string;
            hex: string;
            hue: number;
            saturation: number;
            brightness: number;
            lightness: number;
            red: number;
            green: number;
            blue: number;
            alpha: number;
            readonly RGB: number[];
            readonly HSB: number[];
            readonly HSL: number[];
        } | undefined;
        previewBgColor: string | undefined;
        alpha: number;
        hex: string | undefined;
    };
    getBgColorStyle: import("vue").ComputedRef<{
        background: string | undefined;
    }>;
    onAlphaBlur: (evt: FocusEvent) => void;
    onInputChange: (event: FocusEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:color" | "change")[], "update:color" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    color?: unknown;
    disableAlpha?: unknown;
} & {
    disableAlpha: boolean;
} & {
    color?: Color | undefined;
}> & {
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    disableAlpha: boolean;
}>;
export default _default;
